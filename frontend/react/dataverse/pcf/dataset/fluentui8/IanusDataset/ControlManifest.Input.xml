<?xml version="1.0" encoding="utf-8" ?>
<manifest>
  <control namespace="Ianua" constructor="IanusDataset" version="1.0.5" display-name-key="Ianus Guard Dataset" description-key="Ianus Guard for datasets" control-type="virtual" >
    <!--external-service-usage node declares whether this 3rd party PCF control is using external service or not, if yes, this control will be considered as premium and please also add the external domain it is using.
    If it is not using any external service, please set the enabled="false" and DO NOT add any domain below. The "enabled" will be false by default.
    Example1:
      <external-service-usage enabled="true">
        <domain>www.Microsoft.com</domain>
      </external-service-usage>
    Example2:
      <external-service-usage enabled="false">
      </external-service-usage>
    -->
    <external-service-usage enabled="false">
      <!--UNCOMMENT TO ADD EXTERNAL DOMAINS
      <domain></domain>
      <domain></domain>
      -->
    </external-service-usage>

    <data-set name="licenseDataSet" display-name-key="License Dataset" description-key="Use ian_license table as data" />

    <property name="publisherId" display-name-key="Publisher Id" description-key="Publisher Id using which you publish your component. This is the External Id of your Ianus publisher. Copy it from Ianus portal on your publisher record." of-type="SingleLine.Text" usage="input" required="true" />
    <property name="productId" display-name-key="Product Id" description-key="Id of the product you want to license. This is the External Id of your Ianus product." of-type="SingleLine.Text" usage="input" required="true" />
    <property name="publicKey" display-name-key="Public Key" description-key="Your product and product version specific public key for verifying the license. This is the public key of the product version assigned to the product you want to license." of-type="Multiple" usage="input" required="true" />
    <property name="fallbackPublicKey" display-name-key="Fallback Public Key" description-key="When using multiple product versions or dual signing with a customer generated license, set the appropriate public key in here. Leave empty otherwise." of-type="Multiple" usage="input" required="false" />

    <property name="usagePermissionEntity" display-name-key="Usage Permission Entity" description-key="For user-based licensing, you can define Usage Permissions. Usage permission is defined by the user having read access to a special entity defined by you. If you want to use this, set it to the logical name of your permission entity. Set to blank or leave empty otherwise." of-type="SingleLine.Text" usage="input" required="false" />

    <property name="isValid" display-name-key="Is Valid" description-key="This returns the result of the license validation. If a valid license was found true, otherwise false" of-type="Whole.None" usage="output" required="false" />
    <property name="reason" display-name-key="Reason" description-key="This returns the result text of the license validation. If a valid license was found it is empty, otherwise you get a rejection reason" of-type="SingleLine.Text" usage="output" required="false" />
    <property name="licenseJson" display-name-key="License Json" description-key="This returns the license JSON. If a valid license was found it is returned, otherwise empty" of-type="Multiple" usage="output" required="false" />
    
    <!--
      <property name="licenseObject" display-name-key="License" description-key="This returns the license object. If a valid license was found it is returned, otherwise null" of-type="Object" usage="output" required="false" />
      <property name="licenseObjectSchema" display-name-key="LicenseObjectSchema" of-type="SingleLine.Text" usage="bound" hidden="true"/>

      <property-dependencies>
          <property-dependency input="licenseObjectSchema" output="licenseObject" required-for="schema" />
      </property-dependencies>
    -->

    <!--
      Property node's of-type attribute can be of-type-group attribute.
      Example:
      <type-group name="numbers">
        <type>Whole.None</type>
        <type>Currency</type>
        <type>FP</type>
        <type>Decimal</type>
      </type-group>
      <property name="sampleProperty" display-name-key="Property_Display_Key" description-key="Property_Desc_Key" of-type-group="numbers" usage="bound" required="true" />
    -->
    <resources>
      <code path="index.ts" order="1"/>
      <platform-library name="React" version="16.8.6" />
      <platform-library name="Fluent" version="8.29.0" />

      <!-- UNCOMMENT TO ADD MORE RESOURCES
      <css path="css/IanusDataset.css" order="1" />
      <resx path="strings/IanusDataset.1033.resx" version="1.0.0" />
      -->
    </resources>
    
    <feature-usage>
      <uses-feature name="Utility" required="true" />
      <uses-feature name="WebAPI" required="true" />
      <uses-feature name="WebAPI.retrieveMultipleRecords" required="true" />
      <uses-feature name="WebAPI.updateRecord" required="true" />
    </feature-usage>
  </control>
</manifest>
